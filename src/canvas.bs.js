// Generated by BUCKLESCRIPT VERSION 6.0.1, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Viewport$ReactHooksTemplate = require("./viewport.bs.js");

var rsq = 100;

function in_circle(param, param$1) {
  var match = param$1[1];
  var z = param[0] - match[0] | 0;
  var z$1 = param[1] - match[1] | 0;
  return (Caml_int32.imul(z, z) + Caml_int32.imul(z$1, z$1) | 0) <= rsq;
}

function rel_coords(e) {
  e.stopPropagation();
  var $$native = e.nativeEvent;
  var x = $$native.offsetX | 0;
  var y = $$native.offsetY | 0;
  return /* tuple */[
          x,
          y
        ];
}

var init_state = /* Idle */Block.__(1, [/* record */[
      /* nodes : :: */[
        /* tuple */[
          0,
          /* tuple */[
            50,
            50
          ]
        ],
        /* :: */[
          /* tuple */[
            1,
            /* tuple */[
              100,
              100
            ]
          ],
          /* :: */[
            /* tuple */[
              2,
              /* tuple */[
                100,
                150
              ]
            ],
            /* [] */0
          ]
        ]
      ],
      /* edges : :: */[
        /* tuple */[
          0,
          1
        ],
        /* :: */[
          /* tuple */[
            0,
            2
          ],
          /* :: */[
            /* tuple */[
              2,
              1
            ],
            /* [] */0
          ]
        ]
      ],
      /* mouse_pos : tuple */[
        -50,
        -50
      ]
    ]]);

function Canvas(Props) {
  var dragging_to_idle = function (d) {
    var init = d[/* graph */1];
    return /* Idle */Block.__(1, [/* record */[
                /* nodes : :: */[
                  d[/* active */0],
                  d[/* graph */1][/* nodes */0]
                ],
                /* edges */init[/* edges */1],
                /* mouse_pos */init[/* mouse_pos */2]
              ]]);
  };
  var make_handler = function (state, f1, f2) {
    switch (state.tag | 0) {
      case 0 : 
          return Curry._1(f2, state[0]);
      case 1 : 
          return Curry._1(f1, state[0]);
      default:
        return state;
    }
  };
  var check_snap = function (param) {
    var y = param[1];
    var x = param[0];
    return /* tuple */[
            x,
            y
          ];
  };
  var mode_switch = function (f, param) {
    switch (param.tag | 0) {
      case 0 : 
          return /* Dragging */Block.__(0, [param[0]]);
      case 2 : 
      case 5 : 
          return Curry._1(f, param[1]);
      default:
        return Curry._1(f, param[0]);
    }
  };
  var reduce = function (st, a) {
    if (typeof a === "number") {
      switch (a) {
        case 0 : 
            var param = st;
            return mode_switch((function (g) {
                          return /* Dragging */Block.__(0, [/* record */[
                                      /* active : tuple */[
                                        List.length(g[/* nodes */0]),
                                        /* tuple */[
                                          250,
                                          250
                                        ]
                                      ],
                                      /* graph */g,
                                      /* offset : tuple */[
                                        0,
                                        0
                                      ]
                                    ]]);
                        }), param);
        case 1 : 
            return mode_switch((function (g) {
                          return /* AddEdge */Block.__(3, [g]);
                        }), st);
        case 2 : 
            return mode_switch((function (g) {
                          return /* Idle */Block.__(1, [g]);
                        }), st);
        case 3 : 
            return mode_switch((function (g) {
                          return /* RemoveEdge */Block.__(4, [g]);
                        }), st);
        case 4 : 
            return mode_switch((function (g) {
                          return /* RemoveNode */Block.__(6, [g]);
                        }), st);
        
      }
    } else {
      switch (a.tag | 0) {
        case 0 : 
            var state = st;
            var c = a[0];
            var find_node_f = function (f, g) {
              var match = List.find_opt((function (param) {
                      return in_circle(c, param);
                    }), g[/* nodes */0]);
              if (match !== undefined) {
                var match$1 = match;
                return Curry._2(f, match$1[0], match$1[1]);
              } else {
                return state;
              }
            };
            switch (state.tag | 0) {
              case 0 : 
                  return dragging_to_idle(state[0]);
              case 1 : 
                  var g = state[0];
                  return find_node_f((function (id, param) {
                                var y2 = param[1];
                                var x2 = param[0];
                                var g$prime_000 = /* nodes */List.remove_assoc(id, g[/* nodes */0]);
                                var g$prime_001 = /* edges */g[/* edges */1];
                                var g$prime_002 = /* mouse_pos */g[/* mouse_pos */2];
                                var g$prime = /* record */[
                                  g$prime_000,
                                  g$prime_001,
                                  g$prime_002
                                ];
                                return /* Dragging */Block.__(0, [/* record */[
                                            /* active : tuple */[
                                              id,
                                              /* tuple */[
                                                x2,
                                                y2
                                              ]
                                            ],
                                            /* graph */g$prime,
                                            /* offset : tuple */[
                                              x2 - c[0] | 0,
                                              y2 - c[1] | 0
                                            ]
                                          ]]);
                              }), g);
              case 2 : 
                  var g$1 = state[1];
                  var id1 = state[0];
                  return find_node_f((function (id2, param) {
                                if (id1 === id2) {
                                  return state;
                                } else {
                                  return /* AddEdge */Block.__(3, [/* record */[
                                              /* nodes */g$1[/* nodes */0],
                                              /* edges : :: */[
                                                /* tuple */[
                                                  id1,
                                                  id2
                                                ],
                                                g$1[/* edges */1]
                                              ],
                                              /* mouse_pos */g$1[/* mouse_pos */2]
                                            ]]);
                                }
                              }), g$1);
              case 3 : 
                  var g$2 = state[0];
                  return find_node_f((function (id, param) {
                                return /* AddEdgeSel */Block.__(2, [
                                          id,
                                          g$2
                                        ]);
                              }), g$2);
              case 4 : 
                  var g$3 = state[0];
                  return find_node_f((function (id, param) {
                                return /* RemoveEdgeSel */Block.__(5, [
                                          id,
                                          g$3
                                        ]);
                              }), g$3);
              case 5 : 
                  var g$4 = state[1];
                  var id1$1 = state[0];
                  return find_node_f((function (id2, param) {
                                var e$prime = List.filter((function (param) {
                                          var e2 = param[1];
                                          var e1 = param[0];
                                          if (Caml_obj.caml_notequal(/* tuple */[
                                                  e1,
                                                  e2
                                                ], /* tuple */[
                                                  id1$1,
                                                  id2
                                                ])) {
                                            return Caml_obj.caml_notequal(/* tuple */[
                                                        e2,
                                                        e1
                                                      ], /* tuple */[
                                                        id1$1,
                                                        id2
                                                      ]);
                                          } else {
                                            return false;
                                          }
                                        }))(g$4[/* edges */1]);
                                return /* RemoveEdge */Block.__(4, [/* record */[
                                            /* nodes */g$4[/* nodes */0],
                                            /* edges */e$prime,
                                            /* mouse_pos */g$4[/* mouse_pos */2]
                                          ]]);
                              }), g$4);
              case 6 : 
                  var g$5 = state[0];
                  return find_node_f((function (id, param) {
                                var e$prime = List.filter((function (param) {
                                          if (param[0] !== id) {
                                            return param[1] !== id;
                                          } else {
                                            return false;
                                          }
                                        }))(g$5[/* edges */1]);
                                var n$prime = List.remove_assoc(id, g$5[/* nodes */0]);
                                return /* RemoveNode */Block.__(6, [/* record */[
                                            /* nodes */n$prime,
                                            /* edges */e$prime,
                                            /* mouse_pos */g$5[/* mouse_pos */2]
                                          ]]);
                              }), g$5);
              
            }
        case 1 : 
            var state$1 = st;
            var c$1 = a[0];
            return make_handler(state$1, (function (param) {
                          return state$1;
                        }), (function (d) {
                          var match = d[/* active */0];
                          var match$1 = d[/* offset */2];
                          return /* Dragging */Block.__(0, [/* record */[
                                      /* active : tuple */[
                                        match[0],
                                        check_snap(/* tuple */[
                                              c$1[0] + match$1[0] | 0,
                                              c$1[1] + match$1[1] | 0
                                            ])
                                      ],
                                      /* graph */d[/* graph */1],
                                      /* offset */d[/* offset */2]
                                    ]]);
                        }));
        case 2 : 
            return make_handler(st, (function (param) {
                          return st;
                        }), dragging_to_idle);
        
      }
    }
  };
  var match = React.useReducer(reduce, init_state);
  var dispatch = match[1];
  var state = match[0];
  var match$1;
  var exit = 0;
  switch (state.tag | 0) {
    case 0 : 
        var d = state[0];
        match$1 = /* tuple */[
          /* :: */[
            d[/* active */0],
            d[/* graph */1][/* nodes */0]
          ],
          d[/* graph */1][/* edges */1]
        ];
        break;
    case 2 : 
    case 5 : 
        exit = 1;
        break;
    default:
      var g = state[0];
      match$1 = /* tuple */[
        g[/* nodes */0],
        g[/* edges */1]
      ];
  }
  if (exit === 1) {
    var g$1 = state[1];
    match$1 = /* tuple */[
      g$1[/* nodes */0],
      g$1[/* edges */1]
    ];
  }
  var button_style = {
    border: "none",
    textAlign: "center"
  };
  var mode_string = function (param) {
    switch (param.tag | 0) {
      case 0 : 
      case 1 : 
          return "normal mode";
      case 2 : 
      case 3 : 
          return "add edge mode";
      case 4 : 
      case 5 : 
          return "remove edge mode";
      case 6 : 
          return "remove node mode";
      
    }
  };
  var active_node = function (param) {
    var exit = 0;
    switch (param.tag | 0) {
      case 0 : 
          return param[0][/* active */0];
      case 2 : 
      case 5 : 
          exit = 1;
          break;
      default:
        return undefined;
    }
    if (exit === 1) {
      var id = param[0];
      return List.find((function (param) {
                    return id === param[0];
                  }), param[1][/* nodes */0]);
    }
    
  };
  var keyHandler = function (e) {
    var match = e.key;
    switch (match) {
      case "Escape" : 
          return Curry._1(dispatch, /* ClearMode */2);
      case "a" : 
          return Curry._1(dispatch, /* AddNodeClick */0);
      case "d" : 
          return Curry._1(dispatch, /* RemoveNodeClick */4);
      case "e" : 
          return Curry._1(dispatch, /* AddEdgeClick */1);
      case "r" : 
          return Curry._1(dispatch, /* RemoveEdgeClick */3);
      default:
        return /* () */0;
    }
  };
  return React.createElement("div", undefined, React.createElement("p", {
                  style: {
                    margin: "0px",
                    padding: "0px"
                  }
                }, mode_string(state)), React.createElement(Viewport$ReactHooksTemplate.make, {
                  onMouseDown: (function (param) {
                      return Curry._1(dispatch, /* MouseDown */Block.__(0, [rel_coords(param)]));
                    }),
                  onMouseMove: (function (param) {
                      return Curry._1(dispatch, /* MouseMove */Block.__(1, [rel_coords(param)]));
                    }),
                  onMouseUp: (function (param) {
                      return Curry._1(dispatch, /* MouseUp */Block.__(2, [rel_coords(param)]));
                    }),
                  nodes: match$1[0],
                  edges: match$1[1],
                  radius: 10,
                  width: 800,
                  height: 800,
                  activeNode: active_node(state),
                  grid: undefined,
                  keyHandler: keyHandler
                }), React.createElement("div", undefined, React.createElement("button", {
                      style: button_style,
                      onClick: (function (param) {
                          return Curry._1(dispatch, /* AddNodeClick */0);
                        })
                    }, "Add Node"), React.createElement("button", {
                      style: button_style,
                      onClick: (function (param) {
                          return Curry._1(dispatch, /* RemoveNodeClick */4);
                        })
                    }, "Remove Node"), React.createElement("button", {
                      style: button_style,
                      onClick: (function (param) {
                          return Curry._1(dispatch, /* AddEdgeClick */1);
                        })
                    }, "Add Edge"), React.createElement("button", {
                      style: button_style,
                      onClick: (function (param) {
                          return Curry._1(dispatch, /* RemoveEdgeClick */3);
                        })
                    }, "Remove Edge"), React.createElement("button", {
                      style: button_style,
                      onClick: (function (param) {
                          return Curry._1(dispatch, /* ClearMode */2);
                        })
                    }, "Clear Mode")));
}

var grid = undefined;

var radius = 10;

var width = 800;

var height = 800;

var make = Canvas;

exports.grid = grid;
exports.radius = radius;
exports.rsq = rsq;
exports.width = width;
exports.height = height;
exports.in_circle = in_circle;
exports.rel_coords = rel_coords;
exports.init_state = init_state;
exports.make = make;
/* react Not a pure module */
