// Generated by BUCKLESCRIPT VERSION 6.0.1, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Viewport$ReactHooksTemplate = require("./viewport.bs.js");

var rsq = 100;

function in_circle(param, param$1) {
  var match = param$1[1];
  var z = param[0] - match[0] | 0;
  var z$1 = param[1] - match[1] | 0;
  return (Caml_int32.imul(z, z) + Caml_int32.imul(z$1, z$1) | 0) <= rsq;
}

function rel_coords(e) {
  e.preventDefault();
  e.stopPropagation();
  var $$native = e.nativeEvent;
  var x = $$native.offsetX | 0;
  var y = $$native.offsetY | 0;
  return /* tuple */[
          x,
          y
        ];
}

var init_state = /* Idle */Block.__(1, [/* record */[
      /* nodes : :: */[
        /* tuple */[
          0,
          /* tuple */[
            50,
            50
          ]
        ],
        /* :: */[
          /* tuple */[
            1,
            /* tuple */[
              100,
              100
            ]
          ],
          /* :: */[
            /* tuple */[
              2,
              /* tuple */[
                100,
                150
              ]
            ],
            /* [] */0
          ]
        ]
      ],
      /* edges : :: */[
        /* tuple */[
          0,
          1
        ],
        /* :: */[
          /* tuple */[
            0,
            2
          ],
          /* :: */[
            /* tuple */[
              2,
              1
            ],
            /* [] */0
          ]
        ]
      ]
    ]]);

function Canvas(Props) {
  var match = React.useState((function () {
          return init_state;
        }));
  var setState = match[1];
  var state = match[0];
  var down_handler = function (e) {
    var c = rel_coords(e);
    return Curry._1(setState, (function (param) {
                  switch (state.tag | 0) {
                    case 0 : 
                        var g = state[1];
                        return /* Idle */Block.__(1, [/* record */[
                                    /* nodes : :: */[
                                      state[0],
                                      g[/* nodes */0]
                                    ],
                                    /* edges */g[/* edges */1]
                                  ]]);
                    case 1 : 
                        var g$1 = state[0];
                        var match = List.find_opt((function (param) {
                                return in_circle(c, param);
                              }), g$1[/* nodes */0]);
                        if (match !== undefined) {
                          var id = match[0];
                          return /* Dragging */Block.__(0, [
                                    /* tuple */[
                                      id,
                                      c
                                    ],
                                    /* record */[
                                      /* nodes */List.remove_assoc(id, g$1[/* nodes */0]),
                                      /* edges */g$1[/* edges */1]
                                    ]
                                  ]);
                        } else {
                          return state;
                        }
                    case 2 : 
                        var g$2 = state[1];
                        var id1 = state[0];
                        var match$1 = List.find_opt((function (param) {
                                return in_circle(c, param);
                              }), g$2[/* nodes */0]);
                        if (match$1 !== undefined) {
                          var id2 = match$1[0];
                          if (id1 !== id2) {
                            return /* Idle */Block.__(1, [/* record */[
                                        /* nodes */g$2[/* nodes */0],
                                        /* edges : :: */[
                                          /* tuple */[
                                            id1,
                                            id2
                                          ],
                                          g$2[/* edges */1]
                                        ]
                                      ]]);
                          } else {
                            return state;
                          }
                        } else {
                          return state;
                        }
                    case 3 : 
                        var g$3 = state[0];
                        var match$2 = List.find_opt((function (param) {
                                return in_circle(c, param);
                              }), g$3[/* nodes */0]);
                        if (match$2 !== undefined) {
                          return /* AddEdgeSel */Block.__(2, [
                                    match$2[0],
                                    g$3
                                  ]);
                        } else {
                          return state;
                        }
                    
                  }
                }));
  };
  var move_handler = function (e) {
    var c = rel_coords(e);
    return Curry._1(setState, (function (param) {
                  switch (state.tag | 0) {
                    case 0 : 
                        return /* Dragging */Block.__(0, [
                                  /* tuple */[
                                    state[0][0],
                                    c
                                  ],
                                  state[1]
                                ]);
                    case 1 : 
                    case 2 : 
                    case 3 : 
                        return state;
                    
                  }
                }));
  };
  var up_handler = function (param) {
    return Curry._1(setState, (function (param) {
                  switch (state.tag | 0) {
                    case 0 : 
                        var g = state[1];
                        return /* Idle */Block.__(1, [/* record */[
                                    /* nodes : :: */[
                                      state[0],
                                      g[/* nodes */0]
                                    ],
                                    /* edges */g[/* edges */1]
                                  ]]);
                    case 1 : 
                    case 2 : 
                    case 3 : 
                        return state;
                    
                  }
                }));
  };
  var add_node = function (param) {
    return Curry._1(setState, (function (param) {
                  switch (state.tag | 0) {
                    case 1 : 
                        var g = state[0];
                        return /* Dragging */Block.__(0, [
                                  /* tuple */[
                                    List.length(g[/* nodes */0]),
                                    /* tuple */[
                                      250,
                                      250
                                    ]
                                  ],
                                  g
                                ]);
                    case 0 : 
                    case 2 : 
                    case 3 : 
                        return state;
                    
                  }
                }));
  };
  var add_edge_button = function (param) {
    if (state.tag === 1) {
      var g = state[0];
      return Curry._1(setState, (function (param) {
                    return /* AddEdge */Block.__(3, [g]);
                  }));
    } else {
      return /* () */0;
    }
  };
  var button_style = {
    border: "none",
    textAlign: "center"
  };
  var match$1;
  var exit = 0;
  switch (state.tag | 0) {
    case 0 : 
        var g = state[1];
        match$1 = /* tuple */[
          /* :: */[
            state[0],
            g[/* nodes */0]
          ],
          g[/* edges */1]
        ];
        break;
    case 2 : 
        var g$1 = state[1];
        match$1 = /* tuple */[
          g$1[/* nodes */0],
          g$1[/* edges */1]
        ];
        break;
    case 1 : 
    case 3 : 
        exit = 1;
        break;
    
  }
  if (exit === 1) {
    var g$2 = state[0];
    match$1 = /* tuple */[
      g$2[/* nodes */0],
      g$2[/* edges */1]
    ];
  }
  return React.createElement(React.Fragment, undefined, React.createElement(Viewport$ReactHooksTemplate.make, {
                  onMouseDown: down_handler,
                  onMouseMove: move_handler,
                  onMouseUp: up_handler,
                  nodes: match$1[0],
                  edges: match$1[1],
                  radius: 10,
                  width: 500,
                  height: 500
                }), React.createElement("div", undefined, React.createElement("button", {
                      style: button_style,
                      onClick: add_node
                    }, "Add Node"), React.createElement("button", {
                      style: button_style,
                      onClick: add_edge_button
                    }, "Add Edge")));
}

var radius = 10;

var width = 500;

var height = 500;

var make = Canvas;

exports.radius = radius;
exports.rsq = rsq;
exports.width = width;
exports.height = height;
exports.in_circle = in_circle;
exports.rel_coords = rel_coords;
exports.init_state = init_state;
exports.make = make;
/* react Not a pure module */
